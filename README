README for ls-log 0.1.1
=======================


* 什么是ls-log?
  -------------
  ls-log是一个日志系统, 具体的设计背景以及详细设计文档请参
  见详细的设计文档~~~


* ls-log的目标
  ------------
  ls-log的前端和后端都可以根据具体项目的需求进行相应的替换, 
  根据需求对系统进行简易的封装可以将该日志系统设计成为一个
  日志记录服务器, 同时后端可以将日志记显示到Console窗口, GUI
  界面, 文件, 数据库以及其他网络终端。

  ls-log的目标是可以构建一个跨平台的日志系统解决方案, 目前
  0.1版本主要是针对Windows系统


* 编译ls-log
  ----------
  建议使用MSVC8.0及以上的版本进行编译(MSVC7.1也可进行编译
  但MSVC7.1自身不支持__VA_ARGS__)

  1. 编译带测试的工程
     进入ls-log目录
     > cd ls-log
     ls-log > nmake           # 编译
     ls-log > ls-log.exe      # 可以根据提示对该工程的各个接口进行测试

  2. 编译成静态库
     进入ls-log目录
     > cd ls-log
     ls-log > nmake /f makefile-lib.mk

  3. 编译成动态库
     进入ls-log目录
     > cd ls-log
     ls-log > nmake /f makefile-dll.mk
  
  4. 编译ls-log动态库(静态库)使用demo
     进入demo目录
     > cd ls-log/demo
     ls-log/demo > nmake

  5. 使用MSVC7.1编译带测试的工程
     进入ls-log目录
     > cd ls-log
     ls-log > nmake /f makefile-msvc7.1.mk

  6. 使用MSVC7.1编译成静态库
     进入ls-log目录
     > cd ls-log
     ls-log > nmake /f makefile-lib-msvc7.1.mk

  7. 使用MSVC7.1编译成动态库
     进入ls-log目录
     > cd ls-log
     ls-log > nmake /f makefile-dll-msvc7.1.mk

  8. 使用MSVC7.1编译ls-log动态库(静态库)使用demo
     进入demo目录
     > cd ls-log/demo
     ls-log/demo > nmake /f makefile-msvc7.1.mk


* 使用ls-log
  ----------
  将编译成的静态库或动态库直接拷贝到对应的项目目录下即可, 
  也可以将整个工程的源代码直接添加到对应的项目即可, 同时
  需要将ls-log.conf修改后拷贝到对应的运行目录。

  [注意] 使用ls-log的时候, 编译项目请打开LS_LOG_ON宏

  修改ls-log.conf配置文件
  MODULES - 根据项目中的模块来修改
    count - 表示项目中的模块数量
    0     - 表示主模块(主模块名字可以自己定义), 必须存在
    1 ~ count - 表示其余各个模块的名字
  LS-LOG  - 配置一个Circular Buffer的空间

  在系统启动时调用ls_init
  退出之前调用ls_uninit
  需要打印日志的地方调用ls_log

  具体的使用例子请参见./ls-log/demo/main.c


(end of README)
